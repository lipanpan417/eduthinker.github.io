<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>杨氏双缝干涉三维模拟</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dat.gui@0.7.7/build/dat.gui.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: white;
            overflow: hidden;
        }
        
        #container {
            position: absolute;
            width: 100%;
            height: 100%;
        }
        
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            max-width: 300px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        
        h1 {
            margin-top: 0;
            font-size: 1.5em;
            text-align: center;
            color: #ffcc00;
        }
        
        .control-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        
        .slider-container {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        
        input[type="range"] {
            width: 100%;
        }
        
        .value-display {
            font-size: 0.9em;
            color: #ffcc00;
            text-align: right;
        }
        
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background 0.3s;
            width: 100%;
            margin-top: 10px;
        }
        
        button:hover {
            background: #45a049;
        }
    </style>
</head>
<body>
    <div id="container"></div>
    
    <div id="info">
        <h1>杨氏双缝干涉实验</h1>
        <p>这个模拟展示了光的波动性和干涉现象。通过调整参数，您可以观察到干涉条纹的变化。</p>
        <p><strong>原理：</strong>当光通过两个狭缝时，会产生相干光源，在屏幕上形成明暗相间的干涉条纹。</p>
        <p>条纹间距公式：Δx = λD/d</p>
    </div>
    
    <div class="control-panel">
        <div class="slider-container">
            <label for="wavelength">波长 (nm)</label>
            <input type="range" id="wavelength" min="380" max="780" value="500" step="10">
            <div class="value-display" id="wavelength-value">500 nm</div>
        </div>
        
        <div class="slider-container">
            <label for="slit-distance">双缝间距 (mm)</label>
            <input type="range" id="slit-distance" min="0.1" max="2" value="0.5" step="0.1">
            <div class="value-display" id="slit-distance-value">0.5 mm</div>
        </div>
        
        <div class="slider-container">
            <label for="screen-distance">屏幕距离 (m)</label>
            <input type="range" id="screen-distance" min="0.5" max="5" value="2" step="0.1">
            <div class="value-display" id="screen-distance-value">2 m</div>
        </div>
        
        <div class="slider-container">
            <label for="light-intensity">光强度</label>
            <input type="range" id="light-intensity" min="0.1" max="1" value="0.8" step="0.1">
            <div class="value-display" id="light-intensity-value">0.8</div>
        </div>
        
        <button id="reset-btn">重置参数</button>
    </div>

    <script>
        // 初始化Three.js场景
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x111122);
        
        // 初始化相机
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 0, 5);
        
        // 初始化渲染器
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.getElementById('container').appendChild(renderer.domElement);
        
        // 添加光源
        const ambientLight = new THREE.AmbientLight(0x404040);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);
        
        // 创建坐标系辅助
        const axesHelper = new THREE.AxesHelper(2);
        scene.add(axesHelper);
        
        // 参数
        let params = {
            wavelength: 500,       // 波长 (nm)
            slitDistance: 0.5,     // 双缝间距 (mm)
            screenDistance: 2,     // 屏幕距离 (m)
            lightIntensity: 0.8,  // 光强度
            reset: function() {
                params.wavelength = 500;
                params.slitDistance = 0.5;
                params.screenDistance = 2;
                params.lightIntensity = 0.8;
                updateControls();
                updateSimulation();
            }
        };
        
        // 创建双缝和屏幕
        let slit1, slit2, screen, interferencePattern;
        
        function createScene() {
            // 移除旧的对象
            if (slit1) scene.remove(slit1);
            if (slit2) scene.remove(slit2);
            if (screen) scene.remove(screen);
            if (interferencePattern) scene.remove(interferencePattern);
            
            // 创建双缝
            const slitGeometry = new THREE.BoxGeometry(0.05, 0.2, 0.01);
            const slitMaterial = new THREE.MeshPhongMaterial({ color: 0x888888 });
            
            slit1 = new THREE.Mesh(slitGeometry, slitMaterial);
            slit1.position.set(-params.slitDistance / 2, 0, 0);
            
            slit2 = new THREE.Mesh(slitGeometry, slitMaterial);
            slit2.position.set(params.slitDistance / 2, 0, 0);
            
            scene.add(slit1);
            scene.add(slit2);
            
            // 创建屏幕
            const screenGeometry = new THREE.PlaneGeometry(3, 2);
            const screenMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x333333,
                side: THREE.DoubleSide
            });
            
            screen = new THREE.Mesh(screenGeometry, screenMaterial);
            screen.position.set(0, 0, -params.screenDistance);
            screen.rotation.y = Math.PI;
            scene.add(screen);
            
            // 创建干涉图案
            createInterferencePattern();
        }
        
        function createInterferencePattern() {
            if (interferencePattern) scene.remove(interferencePattern);
            
            const patternWidth = 2.8;
            const patternHeight = 1.8;
            const segments = 200;
            
            const geometry = new THREE.PlaneGeometry(patternWidth, patternHeight, segments, segments);
            const positions = geometry.attributes.position;
            
            // 计算干涉图案
            const pattern = new Float32Array(positions.count);
            const wavelength = params.wavelength * 1e-9; // 转换为米
            const d = params.slitDistance * 1e-3;         // 转换为米
            const D = params.screenDistance;              // 已经是米
            
            for (let i = 0; i < positions.count; i++) {
                const x = positions.getX(i);
                const y = positions.getY(i);
                
                // 计算到两个缝的距离
                const r1 = Math.sqrt(Math.pow(x + d/2, 2) + y*y + D*D);
                const r2 = Math.sqrt(Math.pow(x - d/2, 2) + y*y + D*D);
                
                // 计算相位差和干涉强度
                const delta = 2 * Math.PI * (r2 - r1) / wavelength;
                const intensity = params.lightIntensity * (1 + Math.cos(delta));
                
                pattern[i] = intensity;
            }
            
            // 添加自定义属性
            geometry.setAttribute('intensity', new THREE.BufferAttribute(pattern, 1));
            
            // 创建着色器材质
            const material = new THREE.ShaderMaterial({
                uniforms: {
                    maxIntensity: { value: params.lightIntensity }
                },
                vertexShader: `
                    attribute float intensity;
                    varying float vIntensity;
                    
                    void main() {
                        vIntensity = intensity;
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                    }
                `,
                fragmentShader: `
                    uniform float maxIntensity;
                    varying float vIntensity;
                    
                    void main() {
                        // 根据波长和强度计算颜色
                        float wavelength = ${params.wavelength / 780.0};
                        vec3 color;
                        
                        if (wavelength < 0.38) {
                            color = vec3(0.5, 0.0, 0.5); // 紫外线
                        } else if (wavelength < 0.44) {
                            color = vec3(0.3, 0.0, 0.7);
                        } else if (wavelength < 0.49) {
                            color = vec3(0.0, 0.0, 1.0);
                        } else if (wavelength < 0.51) {
                            color = vec3(0.0, 0.5, 0.5);
                        } else if (wavelength < 0.56) {
                            color = vec3(0.0, 0.7, 0.0);
                        } else if (wavelength < 0.59) {
                            color = vec3(0.7, 0.7, 0.0);
                        } else if (wavelength < 0.62) {
                            color = vec3(1.0, 0.5, 0.0);
                        } else if (wavelength < 0.75) {
                            color = vec3(1.0, 0.0, 0.0);
                        } else {
                            color = vec3(0.7, 0.0, 0.0); // 红外线
                        }
                        
                        float brightness = vIntensity / maxIntensity;
                        gl_FragColor = vec4(color * brightness, 1.0);
                    }
                `,
                side: THREE.DoubleSide
            });
            
            interferencePattern = new THREE.Mesh(geometry, material);
            interferencePattern.position.set(0, 0, -params.screenDistance + 0.01);
            interferencePattern.rotation.y = Math.PI;
            scene.add(interferencePattern);
        }
        
        // 更新模拟
        function updateSimulation() {
            createScene();
        }
        
        // 控制面板交互
        function setupControls() {
            const wavelengthSlider = document.getElementById('wavelength');
            const slitDistanceSlider = document.getElementById('slit-distance');
            const screenDistanceSlider = document.getElementById('screen-distance');
            const lightIntensitySlider = document.getElementById('light-intensity');
            const resetBtn = document.getElementById('reset-btn');
            
            wavelengthSlider.addEventListener('input', function() {
                params.wavelength = parseInt(this.value);
                document.getElementById('wavelength-value').textContent = `${params.wavelength} nm`;
                updateSimulation();
            });
            
            slitDistanceSlider.addEventListener('input', function() {
                params.slitDistance = parseFloat(this.value);
                document.getElementById('slit-distance-value').textContent = `${params.slitDistance} mm`;
                updateSimulation();
            });
            
            screenDistanceSlider.addEventListener('input', function() {
                params.screenDistance = parseFloat(this.value);
                document.getElementById('screen-distance-value').textContent = `${params.screenDistance} m`;
                updateSimulation();
            });
            
            lightIntensitySlider.addEventListener('input', function() {
                params.lightIntensity = parseFloat(this.value);
                document.getElementById('light-intensity-value').textContent = params.lightIntensity.toFixed(1);
                updateSimulation();
            });
            
            resetBtn.addEventListener('click', function() {
                params.reset();
            });
        }
        
        function updateControls() {
            document.getElementById('wavelength').value = params.wavelength;
            document.getElementById('slit-distance').value = params.slitDistance;
            document.getElementById('screen-distance').value = params.screenDistance;
            document.getElementById('light-intensity').value = params.lightIntensity;
            
            document.getElementById('wavelength-value').textContent = `${params.wavelength} nm`;
            document.getElementById('slit-distance-value').textContent = `${params.slitDistance} mm`;
            document.getElementById('screen-distance-value').textContent = `${params.screenDistance} m`;
            document.getElementById('light-intensity-value').textContent = params.lightIntensity.toFixed(1);
        }
        
        // 动画循环
        function animate() {
            requestAnimationFrame(animate);
            
            // 旋转场景以便更好地观察
            scene.rotation.y += 0.002;
            
            renderer.render(scene, camera);
        }
        
        // 窗口大小调整
        window.addEventListener('resize', function() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // 初始化
        setupControls();
        updateControls();
        createScene();
        animate();
    </script>
</body>
</html>
